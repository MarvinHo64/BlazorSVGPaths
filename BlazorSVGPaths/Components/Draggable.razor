@using BlazorSVGPaths.Services
@using BlazorSVGPaths.ViewModels
@inject IMouseService mouseSrv;

<g transform="translate(@X, @Y)" @onmousedown="OnDown" cursor="@_cursor" @onmousedown:stopPropagation="true">
    @ChildContent
</g>

@code {
    ///Code from https://github.com/AlexeyBoiko/BlazorDraggableDemo
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    [Parameter, EditorRequired] public DraggableObject? LearningObject { get; set; }

    [Parameter] public double X { get; set; }

    [Parameter] public double Y { get; set; }
    
    [Parameter] public EventCallback<double> XChanged { get; set; }

    [Parameter] public EventCallback<double> YChanged { get; set; }
    
    [Parameter] public EventCallback<DraggableObject> OnClicked { get; set; }
    
    private double _cursorX;
    private double _cursorY;

    private bool _isDown;
    private string _cursor = "grab";
    private bool _hasMoved;
    
    protected override void OnInitialized()
    {
        mouseSrv.OnMove += OnMove;
        mouseSrv.OnUp += OnUpOrOut;
        mouseSrv.OnOut += OnUpOrOut;
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (LearningObject == null)
        {
            throw new ArgumentNullException(nameof(LearningObject));
        }
    }

    private void OnDown(MouseEventArgs e)
    {
        _cursorX = e.ClientX;
        _cursorY = e.ClientY;
        _isDown = true;
        _cursor = "grabbing";
        _hasMoved = false;
    }

    private void OnUpOrOut(object? sender, MouseEventArgs e)
    {
        if (_isDown && !_hasMoved)
        {
            OnClick(sender, e);
        }
        _isDown = false;
        _cursor = "grab";
    }

    private void OnMove(object? sender, MouseEventArgs e)
    {
        if (!_isDown) return;
        X -= _cursorX - e.ClientX;
        Y -= _cursorY - e.ClientY;

        _cursorX = e.ClientX;
        _cursorY = e.ClientY;
        
        XChanged.InvokeAsync(X);
        YChanged.InvokeAsync(Y);

        _hasMoved = true;
    }

    private Task OnClick(object? sender, MouseEventArgs e)
    {
        return OnClicked.InvokeAsync(LearningObject);
    }
}