@using BlazorSVGPaths.Services
@using BlazorSVGPaths.ViewModels
@using BlazorSVGPaths.Components
@implements IPositioningService
@inject MouseService MouseSrv;
<div class="row mt-2">
    <div class="col">
        <button @onclick="AddDraggableObject"> Add Object</button> 
        <button @onclick="DeleteDraggableObject">Delete Object</button>
        <svg class="bg-light" width="100%" height="500" xmlns="http://www.w3.org/2000/svg"
             @onmousemove=@(e => MouseSrv.FireMove(this, e))
            @onmouseup=@(e => MouseSrv.FireUp(this, e))
            @onmouseleave=@(e => MouseSrv.FireOut(this, e))>

            @foreach (var plt in DraggableObjects)
            {
                <Draggable @bind-X=plt.X @bind-Y=plt.Y OnClicked="@SetSelectedObject" LearningObject="plt">
                    @if (plt == OnHover)
                    {
                        <rect transform="translate(-3, -3)" height="56" width="106" fill="lightblue"></rect>
                        <circle r="6" transform="translate(0, 25)" fill="lightblue"/>
                        <polyline transform="translate(-30, 25)" stroke="lightblue" stroke-width="1.5" fill="transparent" marker-end="url(#hover)" points="0,0 20,0"/>
                        
                    }
                    <rect height="50" width="100" stroke="black" fill="@plt.Color"></rect>
                    <text x="3" y="15">@plt.Id</text>
                    <Clickable OnClicked="DeleteLastConnection" LearningObject="plt">
                        @if (plt.ConnectIn.Any())
                        {
                            <circle r="6" transform="translate(0, 25)" fill="white" stroke="gray"/>
                            <polyline points="0,0 2,0 -2,0" transform="translate(0,25)" style="fill:none;stroke:red;stroke-width:1"/>
                        }
                    </Clickable>
                </Draggable>
                <Pullable X1=plt.X Y1=plt.Y LearningObject="plt" PositioningSrv="this"> </Pullable>
            }

            @foreach (var con in Connections)
            {
                if (con != null)
                {
                    <Connector X1=@(con.From.RootX + 6) Y1=con.From.RootY Dir1=Direction.Right X2=@(con.To.ConnectX - 6) Y2=con.To.ConnectY Dir2=Direction.Left/>
                }
            }

        </svg>
    </div>
</div>

@code {
    [Parameter] public IList<DraggableObject> DraggableObjects { get; set; } = new List<DraggableObject>(); 
    [Parameter] public IList<Connection?> Connections { get; set; } = new List<Connection?>();
    [Parameter] public DraggableObject? SelectedObject { get; set; }
    [Parameter] public int ObjectIds { get; set; }
    [Parameter] public DraggableObject? OnHover { get; set; }

    private void SetSelectedObject(DraggableObject obj)
    {
        if(SelectedObject != null)
        {
            SelectedObject.Color = "lightgreen";
        }
        SelectedObject = obj;
        SelectedObject.Color = "lime";
    }
    
    private void AddDraggableObject()
    {
        ObjectIds += 1;
        var newObject = new DraggableObject(ObjectIds);
        DraggableObjects.Add(newObject);
        SetSelectedObject(newObject);
    }
    
    private void DeleteDraggableObject()
    {
        if(SelectedObject != null)
        {
            foreach (var connectIn in SelectedObject.ConnectIn)
            {
                Connections.Where(c => c?.From == connectIn && c.To == SelectedObject).ToList().ForEach(c => Connections.Remove(c));
                connectIn.ConnectOut.Remove(SelectedObject);
            }
            foreach (var connectOut in SelectedObject.ConnectOut)
            {
                Connections.Where(c => c?.From == SelectedObject && c.To == connectOut).ToList().ForEach(c => Connections.Remove(c));
                connectOut.ConnectIn.Remove(SelectedObject);
            }
            DraggableObjects.Remove(SelectedObject);
            SelectedObject = null;
        }
        SetSelectedObject(DraggableObjects.Last());
        InvokeAsync(StateHasChanged);
    }
    
    void DeleteLastConnection(DraggableObject plt)
    {
        var connection = Connections.Last(c => c?.To == plt);
        if (connection == null) return;
        Connections.Remove(connection);
        connection.From.ConnectOut.Remove(connection.To);
        connection.To.ConnectIn.Remove(connection.From);
    }
    
    public DraggableObject? GetObjectAtPosition(double x, double y)
    {
        return DraggableObjects.FirstOrDefault(p => p.X <= x && p.X + 100 >= x && p.Y <= y && p.Y + 50 >= y);
    }

    public void AddConnection(Connection connection)
    {
        if(Connections.Any(con => con == connection) || connection.From == connection.To || IsCircular(connection))
        {
            OnHover = null;
            return;
        }

        Connections.Add(connection);
        connection.From.ConnectOut.Add(connection.To);
        connection.To.ConnectIn.Add(connection.From);
        OnHover = null;
    }
    
    private bool IsCircular(Connection connection)
    {
        var isCircular = false;
        var objectFromConnect = connection.From;
        var objectToConnect = connection.To;

        if(!objectToConnect.ConnectOut.Any())
        {
            return false;
        }
        var connectOut = objectToConnect.ConnectOut;
        var connectOut2 = new List<DraggableObject>();
        
        while (isCircular == false)
        {
            foreach (var draggableObj in connectOut)
            {
                if(draggableObj == objectFromConnect)
                {
                    isCircular = true;
                }
                connectOut2.AddRange(draggableObj.ConnectOut);
            }
            if (!connectOut.Any())
            {
                break;
            }
            connectOut  = connectOut2;
            connectOut2 = new List<DraggableObject>();
        }
        return isCircular;
    }

    void IPositioningService.OnHover(DraggableObject? draggableObject)
    {
        OnHover = draggableObject;
    }

    public void OnHoverDown()
    {
        OnHover = null;
    }

}